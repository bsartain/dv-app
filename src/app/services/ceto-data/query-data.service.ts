//
// This file is generated by data_server_js/routes/./toTypescript.pl QueryDataService Query/query-routes.js Query
//

import { Injectable, Injector } from '@angular/core';
import { DataService } from "./data.service"
import { Observable } from "rxjs/Observable";
import { Query__Query } from "./ceto-data.service";

@Injectable()
export class QueryDataService extends DataService{

	constructor( injector: Injector ) { 
		super(injector);
	}

    genResultsQuery(id, fullpath)
	{
		let arr = fullpath.split("\\");
		let len = arr.length ;
		let file = arr[len-1];

	  	let user = this._userService.name();
		let url = this.getBaseUrl() + "Query/Result/Export/" + user + 
		          "/" + id + "/" + file;
//		          "/" + id + "/results_" + id + ".txt";
		return url;
	}
	
	//
	// Get Methods
	//
	Get_App_Settings() {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/App/Settings";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		return this.get(cmd);
	}

	Get_Filter(query_id:number=null, query_filter_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Filter";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		if (query_filter_id != null) {
			cmd = cmd + "/" + query_filter_id;
		}
		return this.get(cmd);
	}

	Get_Is_Modified(query_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/IsModified";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		console.log('CMD ' + cmd)
		return this.get(cmd);
	}

	Get_Filter_Value(query_filter_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Filter/Value";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_filter_id != null) {
			cmd = cmd + "/" + query_filter_id;
		}
		return this.get(cmd);
	}

	Get_Filter_Value_Select(query_filter_id:number=null, header_value_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Filter/Value/Select";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_filter_id != null) {
			cmd = cmd + "/" + query_filter_id;
		}
		if (header_value_id != null) {
			cmd = cmd + "/" + header_value_id;
		}
		return this.get(cmd);
	}

	Get_Group_By(query_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Group_By";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		return this.get(cmd);
	}

	Get_Header_Count(query_id:number=null, object_type_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Header/Count";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		if (object_type_id != null) {
			cmd = cmd + "/" + object_type_id;
		}
		return this.get(cmd);
	}

	Get_Measure(query_id:number=null) {
		let user = null;
		if (user == null && query_id == null) {
			let cmd = "Query/Measure";
			return this.get(cmd);
		}
		user = this._userService.name();
		let cmd = "Query/Measure";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		return this.get(cmd);
	}

	Get_Query(query_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Query";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		return this.get(cmd);
	}

	Get_Preview(query_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Preview";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		return this.get(cmd);
	}

// 	Query__get_copy(query_id: number){
// 		let user = this._userService.name();
// 		let cmd = "Query/Query/Copy";
// 		cmd = cmd + "/" + user;
// 		cmd = cmd + "/" + query_id;
// 		return this.get(cmd);
// 	}

	Get_Results(query_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Result";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		return this.get(cmd);
	}


// 	//Run button on dashboard
	Get_Run(query_id:number, is_temp_id:boolean = null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Run";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		cmd = cmd + "/" + query_id;
		let tmp_id = 0
		if (is_temp_id != null) {
			if (is_temp_id == true) {
				tmp_id = 1
			}
		}
		cmd = cmd + "/" + tmp_id;
		console.log(cmd)
		return this.get(cmd);
	}

	Get_Share(query_id:number=null) {
		let user = null;
		user = this._userService.name();
		let cmd = "Query/Share";
		if (user != null) {
			cmd = cmd + "/" + user;
		}
		if (query_id != null) {
			cmd = cmd + "/" + query_id;
		}
		return this.get(cmd);
	} 

// 	Get_State() {
// 		let user = null;
// 		user = this._userService.name();
// 		let cmd = "Query/State";
// 		if (user != null) {
// 			cmd = cmd + "/" + user;
// 		}
// 		return this.get(cmd);
// 	}

// 	Get_Summary(query_id:number=null) {
// 		let user = null;
// 		user = this._userService.name();
// 		let cmd = "Query/Summary";
// 		if (user != null) {
// 			cmd = cmd + "/" + user;
// 		}
// 		if (query_id != null) {
// 			cmd = cmd + "/" + query_id;
// 		}
// 		return this.get(cmd);
// 	}

// 	Get_Copy_Info(query_id:number=null) {
// 		let user = null;
// 		user = this._userService.name();
// 		let cmd = "Query/CopyInfo";
// 		if (user != null) {
// 			cmd = cmd + "/" + user;
// 		}
// 		if (query_id != null) {
// 			cmd = cmd + "/" + query_id;
// 		}
// 		return this.get(cmd);
// 	}

// 	//
// 	// Put Methods
// 	//
// 	Put_Cancel(query_id:number) {
// 		let user = this._userService.name();
// 		class Cancel_Data {
// 			user:string;
// 			query_id:number;
// 		};
// 		let data = new Cancel_Data();
// 		data.user = user;
// 		data.query_id = query_id;
// 		let body = JSON.stringify(data);
// 		let cmd = "Query/Cancel";
// 		return this.put(cmd, body);
// 	}

	Put_Edit_Cancel(query_id:number) {
		let user = this._userService.name();
		class Cancel_Data {
			user:string;
			query_id:number;
		};
		let data = new Cancel_Data();
		data.user = user;
		data.query_id = query_id;
		let body = JSON.stringify(data);
		let cmd = "Query/Edit/Cancel";
		return this.put(cmd, body);
	}

	Put_Description(query_id:number, description:string) {
		let user = this._userService.name();
		class Description_Data {
			user:string;
			query_id:number;
			description:string;
		};
		let data = new Description_Data();
		data.user = user;
		data.query_id = query_id;
		data.description = description;
		let body = JSON.stringify(data);
		let cmd = "Query/Description";
		return this.put(cmd, body);
	}

	Put_Edit(query_id:number) {
		let user = this._userService.name();
		class Edit_Data {
			user:string;
			query_id:number;
		};
		let data = new Edit_Data();
		data.user = user;
		data.query_id = query_id;
		let body = JSON.stringify(data);
		let cmd = "Query/Edit";
		return this.put(cmd, body);
	}

	Put_Filter_Order(query_filter_id:number, order:number) {
		let user = this._userService.name();
		class Filter_Order_Data {
			user:string;
			query_filter_id:number;
			order:number;
		};
		let data = new Filter_Order_Data();
		data.user = user;
		data.query_filter_id = query_filter_id;
		data.order = order;
		let body = JSON.stringify(data);
		let cmd = "Query/Filter/Order";
		return this.put(cmd, body);
	}

// 	Put_Group_By_Order(group_by_id:number, order:number) {
// 		let user = this._userService.name();
// 		class Group_By_Order_Data {
// 			user:string;
// 			group_by_id:number;
// 			order:number;
// 		};
// 		let data = new Group_By_Order_Data();
// 		data.user = user;
// 		data.group_by_id = group_by_id;
// 		data.order = order;
// 		let body = JSON.stringify(data);
// 		let cmd = "Query/Group_By/Order";
// 		return this.put(cmd, body);
// 	}

	Put_Measures_First(query_id:number, first:boolean) {
		let user = this._userService.name();
		class Measure_First_Data {
			user:string;
			query_id:number;
			measures_first:number;
		};
		let data = new Measure_First_Data();
		data.user = user;
		data.query_id = query_id;
		data.measures_first = 0;
		if (first == true) {
			data.measures_first = 1;
		}
		let body = JSON.stringify(data);
		let cmd = "Query/Measures/First";
		return this.put(cmd, body);
	}

	Put_Name_Desc(query_id:number, name:string, desc:string) {
		let user = this._userService.name();
		class Name_Data {
			user:string;
			query_id:number;
			name:string;
			description:string;
		};
		let data = new Name_Data();
		data.user = user;
		data.query_id = query_id;
		data.name = name;
		data.description = desc;
		let body = JSON.stringify(data);
		let cmd = "Query/Name_Desc";
		return this.put(cmd, body);
	}

	Put_Name(query_id:number, name:string) {
		let user = this._userService.name();
		class Name_Data {
			user:string;
			query_id:number;
			name:string;
			description:string;
		};
		let data = new Name_Data();
		data.user = user;
		data.query_id = query_id;
		data.name = name;
		let body = JSON.stringify(data);
		let cmd = "Query/Name";
		return this.put(cmd, body);
	}

	Put_Save(query_id:number) {
		let user = this._userService.name();
		class Save_Data {
			user:string;
			query_id:number;
		};
		let data = new Save_Data();
		data.user = user;
		data.query_id = query_id;
		let body = JSON.stringify(data);
		let cmd = "Query/Save";
		return this.put(cmd, body);
	}

// 	Put_Share(query_id:number) {
// 		let user = this._userService.name();
// 		class Share_Data {
// 			user:string;
// 			query_id:number;
// 			//share:number;
// 		};
// 		let data = new Share_Data();
// 		data.user = user;
// 		data.query_id = query_id;
// 		//data.share = share;
// 		let body = JSON.stringify(data);
// 		let cmd = "Query/Share";
// 		return this.put(cmd, body);
// 	}

	changeBoolToNum(thebool: boolean){
		if(thebool == true){
			return 1;
		} else {
			return 0;
		}
	}

	Put_Options(query: Query__Query) {
		let user = this._userService.name();
		class Share_Data {
			user:string;
			query_id:number;
			all_transactions: number;
			card_only: number;
			non_card_only: number;
			exclude_supplies: number;
			exclude_exception_hhs: number
		};
		let data = new Share_Data();
		data.user = user;
		data.query_id = query.id_Query_ID;
		data.all_transactions = this.changeBoolToNum(query.bool_All_Transactions);
		data.card_only = this.changeBoolToNum(query.bool_Card_Only);
		data.non_card_only = this.changeBoolToNum(query.bool_Non_Card_Only);
		data.exclude_supplies = this.changeBoolToNum(query.bool_Exclude_Supplies);
		data.exclude_exception_hhs = this.changeBoolToNum(query.bool_Exclude_Exception_HHs);
		//data.share = share;
		let body = JSON.stringify(data);
		let cmd = "Query/Options";
		return this.put(cmd, body);
	}

	

// 	//
// 	// Post Methods
// 	//
	Post_Copy(query_id:number) {
		let user = this._userService.name();
		class Copy_Data {
			user:string;
			query_id:number;
		};
		let data = new Copy_Data();
		data.user = user;
		data.query_id = query_id;
		let body = JSON.stringify(data);
		let cmd = "Query/Copy/" + user + '/' + data.query_id;
		return this.post(cmd, body);
	}

	Post_Filter(query_id:number, header_id:number, order:number) {
		let user = this._userService.name();
		class Filter_Data {
			user:string;
			query_id:number;
			header_id:number;
			order:number;
		};
		let data = new Filter_Data();
		data.user = user;
		data.query_id = query_id;
		data.header_id = header_id;
		data.order = order;
		let body = JSON.stringify(data);
		let cmd = "Query/Filter";
		return this.post(cmd, body);
	}

	Post_Filter_Value_Select(query_filter_id:number, header_value_id:number) {
		let user = this._userService.name();
		class Filter_Value_Select_Data {
			user:string;
			query_filter_id:number;
			header_value_id:number;
		};
		let data = new Filter_Value_Select_Data();
		data.user = user;
		data.query_filter_id = query_filter_id;
		data.header_value_id = header_value_id;
		let body = JSON.stringify(data);
		let cmd = "Query/Filter/Value/Select";
		return this.post(cmd, body);
	}

	Post_Group_By(query_id:number, header_id:number, cross_tab:number, order:number) {
		let user = this._userService.name();
		class Group_By_Data {
			user:string;
			query_id:number;
			header_id:number;
			cross_tab:number;
			order:number;
		};
		let data = new Group_By_Data();
		data.user = user;
		data.query_id = query_id;
		data.header_id = header_id;
		data.cross_tab = cross_tab;
		data.order = order;
		let body = JSON.stringify(data);
		let cmd = "Query/Group_By";
		return this.post(cmd, body);
	}

	Post_Measure(query_id:number, measure_id:number, order:number) {	
		let user = this._userService.name();
		class Measure_Data {
			user:string;
			query_id:number;
			measure_id:number;
			order:number;
		};
		let data = new Measure_Data();
		data.user = user;
		data.query_id = query_id;
		data.measure_id = measure_id;
		data.order = order;
		let body = JSON.stringify(data);
		let cmd = "Query/Measure";
		return this.post(cmd, body);
	}

	Post_Query() {	
		let user = this._userService.name();
		class Query_Data {
			user:string;
			segment_id:number;
			xpdb:string;
		};
		let data = new Query_Data();
		data.user = user;
		data.segment_id = 1;
		data.xpdb = this.xpdb;
		let body = JSON.stringify(data);
		let cmd = "Query";
		return this.post(cmd, body);
	}

	Post_SaveAs(query_id:number, name:string, description:string) {
		let user = this._userService.name();
		class SaveAs_Data {
			user:string;
			query_id:number;
			name:string;
			description:string
		};
		let data = new SaveAs_Data();
		data.user = user;
		data.query_id = query_id;
		data.name = name;
		data.description = description
		let body = JSON.stringify(data);
		let cmd = "Query/SaveAs";
		return this.post(cmd, body);
	}

	Post_Share(query_id:number) {
		let user = this._userService.name();
		class Share_Data {
			user:string;
			query_id:number;
		};
		let data = new Share_Data();
		data.user = user;
		data.query_id = query_id;
		let body = JSON.stringify(data);
		let cmd = "Query/Share";
		return this.post(cmd, body);
	}

	Post_Share_Copy(query_id:number) {
		let user = this._userService.name();
		class Share_Copy_Data {
			user:string;
			query_id:number;
		};
		let data = new Share_Copy_Data();
		data.user = user;
		data.query_id = query_id;
		let body = JSON.stringify(data);
		let cmd = "Query/Share/Copy/" + user + '/' + query_id;
		return this.post(cmd, body);
	}

	//
	// Delete Methods
	//
	Delete_Query(query_id:number) {
		let user = this._userService.name();
		// class Filter_Data {
		// 	user:string;
		// 	query_filter_id:number;
		// };
		// let data = new Filter_Data();
		// data.user = user;
		// data.query_filter_id = query_filter_id;
		// let body = JSON.stringify(data);
		// let cmd = "Query/Filter/";
		let cmd = "Query/" + user + "/" + query_id;
		return this.delete(cmd);
	}

	Delete_Filter(query_filter_id:number) {
		let user = this._userService.name();
		// class Filter_Data {
		// 	user:string;
		// 	query_filter_id:number;
		// };
		// let data = new Filter_Data();
		// data.user = user;
		// data.query_filter_id = query_filter_id;
		// let body = JSON.stringify(data);
		// let cmd = "Query/Filter/";
		let cmd = "Query/Filter/" + user + "/" + query_filter_id;
		return this.delete(cmd);
	}

// 	Delete_Filter_Value_Select(query_filter_id:number, header_value_id:number) {
// 		let user = this._userService.name();
// 		class Filter_Value_Select_Data {
// 			user:string;
// 			query_filter_id:number;
// 			header_value_id:number;
// 		};
// 		let data = new Filter_Value_Select_Data();
// 		data.user = user;
// 		data.query_filter_id = query_filter_id;
// 		data.header_value_id = header_value_id;
// 		let body = JSON.stringify(data);
// 		let cmd = "Query/Filter/Value/Select";
// 		return this.delete(cmd);
// 	}

// 	// Delete_Group_By(query_id:number, group_by_id:number) {
// 	// 	let user = this._userService.name();
// 	// 	class Group_By_Data {
// 	// 		user:string;
// 	// 		query_id:number;
// 	// 		group_by_id:number;
// 	// 	};
// 	// 	let data = new Group_By_Data();
// 	// 	data.user = user;
// 	// 	data.query_id = query_id;
// 	// 	data.group_by_id = group_by_id;
// 	// 	let body = JSON.stringify(data);
// 	// 	let cmd = "Query/Group_By";
// 	// 	return this.delete(cmd);
// 	// }

	Delete_Group_By(query_id:number): Observable<any> {
		let user = this._userService.name();
		let cmd = "Query/Group_By/" + user + "/" + query_id;
		return this.delete(cmd);
	}


// 	Delete_Measure(query_to_measure_link_id:number) {
// 		let user = this._userService.name();
// 		// class Measure_Data {
// 		// 	user:string;
// 		// 	query_to_measure_link_id:number;
// 		// };
// 		// let data = new Measure_Data();
// 		// data.user = user;
// 		// data.query_to_measure_link_id = query_to_measure_link_id;
// 		// let body = JSON.stringify(data);
// 		let cmd = "Query/Measure/"+user+"/"+query_to_measure_link_id;
// 		return this.delete(cmd);
// 	}

	Delete_Measure_All(query_id:number) {
		let user = this._userService.name();
		// class Measure_Data {
		// 	user:string;
		// 	query_to_measure_link_id:number;
		// };
		// let data = new Measure_Data();
		// data.user = user;
		// data.query_to_measure_link_id = query_to_measure_link_id;
		// let body = JSON.stringify(data);
		let cmd = "Query/MeasureAll/"+user+"/"+query_id;
		return this.delete(cmd);
	}

// 	Delete_Query_Filter_All(query_id:number) {
// 		let user = this._userService.name();
// 		let cmd = "Query/FilterAll/"+user+"/"+query_id;
// 		return this.delete(cmd);
// 	}

	Delete_Query_Filter_Value_All(qfid: number){
		let user = this._userService.name();
		let cmd = "Query/Filter/Value/"+user+"/"+qfid;
		return this.delete(cmd);
	}

	Delete_Result(result_id:number) {
		let user = this._userService.name();
		let cmd = "Query/Result/Export/"+user+"/"+result_id;
		return this.delete(cmd);
	}

	Delete_Share(query_id:number){
		let user = this._userService.name();
		let cmd = "Query/Unshare/"+user+"/"+query_id;
		return this.delete(cmd);
	}



}
